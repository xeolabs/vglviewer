/* Generated by Together */

package vglRenderer;

/** Inserts extra vertices into a path, without changing it's shape */
public class VerticesSubDivider {
    private VerticesSubDivider() {
        dx = new long[maxVerts];
        dy = new long[maxVerts];
        nVerts = 0;
    }

    /** Get singleton instance */
    public static VerticesSubDivider getInstance() {
        if (instance == null) {
            instance = new VerticesSubDivider();
        }
        return instance;
    }

    /**
     * Subdivide path; subsequently, getNumVerts will return the number of new vertices, while getSX and getSY will
     * return the new vertices
     */
    public void subDivide(long[] sx, long[] sy, int n, double f) {
        nVerts = 0;
        int last = n - 1;
        for (int i = 0; i < last; i++) {
            subDivideEdge(sx[i], sy[i], sx[i + 1], sy[i + 1], f);
        }
    }

    /** Subdivide an edge */
    private void subDivideEdge(long xa, long ya, long xb, long yb, double f) {
        /* Compute slope of line
        */

        long deltaX = xb - xa;
        long deltaY = yb - ya;
        double slope = (deltaY == 0L) ? 0.0 : (double)deltaY / (double)deltaX;

		/* Interpolate
		*/

        dx[nVerts] = xa;
        dy[nVerts] = ya;
        double f2 = f;
        while (f2 < 1.0) {
            nVerts++;
            if (nVerts >= maxVerts) {
                doubleStorage();
            }
            dx[nVerts] = interpolate(xa, xb, f2);
            dy[nVerts] = interpolate(ya, yb, f2);
            f2 += f;
        }
        nVerts++;
        if (nVerts >= maxVerts) {
            doubleStorage();
        }
        dx[nVerts] = xb;
        dy[nVerts] = yb;
    }

    /** Interpolate within an edge */
    private long interpolate(long a, long b, double f) {
        return (long)((double)a + ((double)(b - a) * f));
    }

    /** Get number of vertices after subdivision */
    public int getNumVerts() {
        return nVerts;
    }

    /** Get X vertex coordinates after subdivision */
    public long[] getSX() {
        return dy;
    }

    /** Get Y vertex coordinates after subdivision */
    public long[] getSY() {
        return dx;
    }

    /** Double the amount of storage available for new vertices */
    private void doubleStorage() {
        long[] tx = dx;
        long[] ty = dy;
        maxVerts += maxVerts;
        dx = new long[maxVerts];
        dy = new long[maxVerts];
        for (int i = 0; i < nVerts; i++) {
            dx[i] = tx[i];
            dy[i] = ty[i];
        }
    }

    private static VerticesSubDivider instance = null;
    private int maxVerts = 200;
    private int nVerts;
    private long[] dx;
    private long[] dy;
}
