/* Generated by Together */

package vglDocument.utils;

import vglDocument.VGLPolygon;
import vglDocument.VGLPoints;
import vglDocument.VGLProperties;
import vglDocument.VGLStyle;
import vglDocument.VGLPoint;
import java.util.Vector;
import java.util.Iterator;
import vglDocument.VGLPath;
import vglDocument.VGLColor;
import vglDocument.VGLFont;
import vglDocument.AbstractVGLFontFactory;

class BuildingStyle extends AbstractBuilderState {
    /** Initialise new state in which we are building a style */
    public BuildingStyle(BuildContext context, AbstractBuilderState parent) {
        super(context, parent);
        this.fillColor = context.getDefaultFillColor();
        this.strokeColor = context.getDefaultStrokeColor();
        this.font = context.getDefaultFont();
        this.name = null;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setFillColor(int r, int g, int b) {
        this.fillColor = new VGLColor(r, g, b);
    }

    public void setStrokeColor(int r, int g, int b) {
        this.strokeColor = new VGLColor(r, g, b);
    }

    public void setFont(String face, int style, int size) {
        try {
            AbstractVGLFontFactory fontFactory = context.getFontFactory();
            this.font = fontFactory.newFont(face, style, size);
        }
        catch (Exception e) { // font not supported
            context.getErrorHandler().handleError(e.getMessage());
        }
    }

    /** Build path, add it to document, return parent state */
    public AbstractBuilderState close() {
        if (name == null) {
            getContext().getErrorHandler().handleError("a name was not given for style definition - style not defined");
            return parent;
        }
        getContext().putStyle(name, new VGLStyle(fillColor, strokeColor, font));
        return parent;
    }

    /** Get description of what we are building in this state */
    protected String getDescription() {
        return "a style definition";
    }

    private String name;
    private VGLColor fillColor;
    private VGLColor strokeColor;
    private VGLFont font;
}
