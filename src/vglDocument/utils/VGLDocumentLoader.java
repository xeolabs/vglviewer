/* Generated by Together */

package vglDocument.utils;

import vglDocument.VGLDocument;
import net.n3.nanoxml.IXMLBuilder;
import net.n3.nanoxml.XMLParserFactory;
import net.n3.nanoxml.StdXMLReader;
import net.n3.nanoxml.IXMLReader;
import net.n3.nanoxml.IXMLParser;
import java.io.IOException;
import net.n3.nanoxml.XMLException;
import java.io.FileNotFoundException;
import java.net.URL;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URLConnection;


public class VGLDocumentLoader {
    public VGLDocumentLoader(VGLDocumentBuilder docBuilder) {
        this.docBuilder = docBuilder;
        this.errorHandler = null;
    }

    public void setErrorHandler(ErrorHandler errorHandler) {
        this.errorHandler = errorHandler;
    }

    public VGLDocument load(String url) throws FileNotFoundException, IOException {
        /*
              String aLine = "";
              try
              {
      URL source = new URL(url);
      BufferedReader br =
        new BufferedReader
          (new InputStreamReader(source.openStream()));
      while(null != (aLine = br.readLine()))
         System.out.println(aLine);
      br.close();
      }
    catch(Exception e) {
      e.printStackTrace();
      }
*/

        try {
            IXMLBuilder builder = new VGLXMLBuilder(docBuilder, errorHandler);
            IXMLParser parser = XMLParserFactory.createDefaultXMLParser();
            IXMLReader reader = StdXMLReader.fileReader(url);
            parser.setReader(reader);
            parser.setBuilder(builder);
            parser.parse();
            return docBuilder.buildDocument();
        }
        catch (ClassNotFoundException cnfe) {
            throw new RuntimeException(cnfe.getMessage());
        }
        catch (InstantiationException ie) {
            throw new RuntimeException(ie.getMessage());
        }
        catch (IllegalAccessException iae) {
            throw new RuntimeException(iae.getMessage());
        }
        catch (XMLException xmle) {
            String msg = xmle.getMessage();
            if (errorHandler != null) {
                errorHandler.handleError(msg);
            }
            return null;
        }
    }

    public VGLDocument load(URL url) throws FileNotFoundException, IOException {
        StringBuffer sb = new StringBuffer();
        try {
            URLConnection urlConn = url.openConnection();
            InputStreamReader inStream = new InputStreamReader(urlConn.getInputStream());
            BufferedReader buff = new BufferedReader(inStream);
            while (true) {
                String nextLine = buff.readLine();
                if (nextLine != null) {
                    System.out.println(nextLine);
                    sb.append(nextLine);
                }
                else {
                    break;
                }
            }
            IXMLBuilder builder = new VGLXMLBuilder(docBuilder, errorHandler);
            IXMLParser parser = XMLParserFactory.createDefaultXMLParser();
            IXMLReader reader = StdXMLReader.stringReader(sb.toString());

            parser.setReader(reader);
            parser.setBuilder(builder);
            parser.parse();
            return docBuilder.buildDocument();
        }
        catch (ClassNotFoundException cnfe) {
            throw new RuntimeException(cnfe.getMessage());
        }
        catch (InstantiationException ie) {
            throw new RuntimeException(ie.getMessage());
        }
        catch (IllegalAccessException iae) {
            throw new RuntimeException(iae.getMessage());
        }
        catch (XMLException xmle) {
            String msg = xmle.getMessage();
            if (errorHandler != null) {
                errorHandler.handleError(msg);
            }
            return null;
        }
    }

    /**
     * @link aggregationByValue
     * @clientCardinality 1
     * @supplierCardinality 1
     */
    private VGLDocumentBuilder docBuilder;

    /**
     * @supplierCardinality 1
     * @clientCardinality 1
     */
    private ErrorHandler errorHandler;
    private VGLXMLBuilder lnkVGLXMLBuilder;
}
