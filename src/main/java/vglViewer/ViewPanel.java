/* Generated by Together */

package vglViewer;

import java.awt.Panel;
import java.awt.Button;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.Point;

import java.awt.Color;
import vglDocument.VGLDocument;
import sdaz.SDAZPoint;
import vglRenderer.VGLDocumentRenderer;
import sdaz.SDAZDriver;
import vglRenderer.VGLViewport;
import vglDocument.VGLBoundary;
import vglRenderer.VGLWindow;
import sdaz.SDAZViewport;
import sdaz.SDAZSubject;
import sdaz.SDAZWindow;
import java.awt.CheckboxGroup;
import java.awt.Checkbox;
import java.awt.Label;
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;
import docViewPanel.DocViewPanel;
import docViewPanel.RepaintObserver;
import java.awt.Graphics;
import java.awt.Dimension;


public class ViewPanel extends Panel {
    public ViewPanel() {
        super();
        initGUI();
        initInteraction ();
        this.setBackground(new Color(255, 255, 255));
        marqueeMode();
    }

    private void initGUI() {
        label2.setText("Zoom ");
        zoomOutButton.setLabel("-25%");
        zoomOutButton.setActionCommand("zoomOut");
        zoomOutButton.addActionListener(
            new ActionListener() {
                public void actionPerformed(ActionEvent e) { zoomOut(); }
            });
        homeButton.setLabel("Home");
        homeButton.setActionCommand("home");
        homeButton.addActionListener(
            new ActionListener() {
                public void actionPerformed(ActionEvent e) { resetViewport(); }
            });
        zoomInButton.setLabel("+25%");
        zoomInButton.setActionCommand("zoomIn");
        zoomInButton.addActionListener(
            new ActionListener() {
                public void actionPerformed(ActionEvent e) { zoomIn(); }
            });
        label1.setText("Cursor");
        setLayout(new java.awt.GridBagLayout());
        add(controlPanel,
            new java.awt.GridBagConstraints(0, 0, 1, 1, 0.01, 1.0, java.awt.GridBagConstraints.CENTER, java.awt.GridBagConstraints.BOTH,
            new java.awt.Insets(0, 0, 0, 0), 0, 0));
        docViewPanel = new DocViewPanel();
        add(docViewPanel,
            new java.awt.GridBagConstraints(1, 0, 1, 1, 1.0, 1.0, java.awt.GridBagConstraints.CENTER, java.awt.GridBagConstraints.BOTH,
            new java.awt.Insets(0, 0, 0, 0), 0, 0));
        controlPanel.setBackground(new java.awt.Color(204, 204, 255));
        controlPanel.setLayout(new java.awt.GridBagLayout());
        controlPanel.add(cursorPanel,
        new java.awt.GridBagConstraints(0, 2, 1, 1, 1.0, 1.0, java.awt.GridBagConstraints.CENTER, java.awt.GridBagConstraints.HORIZONTAL,
        new java.awt.Insets(0, 0, 0, 0), 0, 0));
        controlPanel.add(zoomPanel,
            new java.awt.GridBagConstraints(0, 0, 1, 1, 0.0, 0.0, java.awt.GridBagConstraints.WEST, java.awt.GridBagConstraints.HORIZONTAL,
            new java.awt.Insets(0, 0, 0, 0), 0, 0));
      
        staticViewport = this.docViewPanel.getViewport();
        cursorPanel.setLayout(new java.awt.GridBagLayout());
        cursorPanel.add(sdazCheckbox,
            new java.awt.GridBagConstraints(0, 1, 1, 1, 1.0, 0.0, java.awt.GridBagConstraints.CENTER, java.awt.GridBagConstraints.HORIZONTAL,
            new java.awt.Insets(0, 10, 0, 0), 0, 0));
        cursorPanel.add(marqueeCheckbox,
            new java.awt.GridBagConstraints(0, 2, 1, 1, 1.0, 0.0, java.awt.GridBagConstraints.CENTER, java.awt.GridBagConstraints.HORIZONTAL,
            new java.awt.Insets(0, 10, 0, 0), 0, 0));
        cursorPanel.add(label1,
            new java.awt.GridBagConstraints(0, 0, 1, 1, 0.0, 0.0, java.awt.GridBagConstraints.CENTER, java.awt.GridBagConstraints.NONE,
            new java.awt.Insets(0, 0, 0, 0), 0, 0));
        sdazCheckbox.setLabel("SDAZ");
        sdazCheckbox.addItemListener(
            new ItemListener() {
                public void itemStateChanged(ItemEvent i) {
                    sdazMode();
                }
            });
        marqueeCheckbox.setLabel("Marquee");
        marqueeCheckbox.addItemListener(
            new ItemListener() {
                public void itemStateChanged(ItemEvent i) {
                    marqueeMode();
                }
            });
        zoomPanel.setLayout(new java.awt.GridBagLayout());
        zoomPanel.add(zoomInButton,
            new java.awt.GridBagConstraints(0, 1, 1, 1, 0.0, 0.0, java.awt.GridBagConstraints.WEST, java.awt.GridBagConstraints.HORIZONTAL,
            new java.awt.Insets(5, 5, 5, 5), 0, 0));
        zoomPanel.add(homeButton,
            new java.awt.GridBagConstraints(0, 2, 1, 1, 0.0, 0.0, java.awt.GridBagConstraints.WEST, java.awt.GridBagConstraints.HORIZONTAL,
            new java.awt.Insets(5, 5, 5, 5), 0, 0));
        zoomPanel.add(zoomOutButton,
            new java.awt.GridBagConstraints(0, 3, 1, 1, 0.0, 0.0, java.awt.GridBagConstraints.WEST, java.awt.GridBagConstraints.HORIZONTAL,
            new java.awt.Insets(5, 5, 5, 5), 0, 0));
        zoomPanel.add(label2,
            new java.awt.GridBagConstraints(0, 0, 1, 1, 0.0, 0.0, java.awt.GridBagConstraints.CENTER, java.awt.GridBagConstraints.NONE,
            new java.awt.Insets(0, 0, 0, 0), 0, 0));
        panPanel.setLayout(new java.awt.GridBagLayout());
        panPanel.add(button8,
        new java.awt.GridBagConstraints(2, 2, 1, 1, 0.3, 0.0, java.awt.GridBagConstraints.CENTER, java.awt.GridBagConstraints.HORIZONTAL,
        new java.awt.Insets(0, 0, 0, 0), 0, 0));
        panPanel.add(button7,
        new java.awt.GridBagConstraints(0, 2, 1, 1, 0.3, 0.0, java.awt.GridBagConstraints.CENTER, java.awt.GridBagConstraints.HORIZONTAL,
        new java.awt.Insets(0, 0, 0, 0), 0, 0));
        panPanel.add(button6,
        new java.awt.GridBagConstraints(2, 0, 1, 1, 0.3, 0.0, java.awt.GridBagConstraints.CENTER, java.awt.GridBagConstraints.HORIZONTAL,
        new java.awt.Insets(0, 0, 0, 0), 0, 0));
        panPanel.add(button5,
        new java.awt.GridBagConstraints(0, 0, 1, 1, 0.3, 0.0, java.awt.GridBagConstraints.CENTER, java.awt.GridBagConstraints.HORIZONTAL,
        new java.awt.Insets(0, 0, 0, 0), 0, 0));
        panPanel.add(button1,
        new java.awt.GridBagConstraints(0, 1, 1, 1, 0.0, 0.0, java.awt.GridBagConstraints.CENTER, java.awt.GridBagConstraints.HORIZONTAL,
        new java.awt.Insets(0, 0, 0, 0), 0, 0));
        panPanel.add(button2,
        new java.awt.GridBagConstraints(2, 1, 1, 1, 0.0, 0.0, java.awt.GridBagConstraints.CENTER, java.awt.GridBagConstraints.HORIZONTAL,
        new java.awt.Insets(0, 0, 0, 0), 0, 0));
        panPanel.add(button3,
        new java.awt.GridBagConstraints(1, 2, 1, 1, 0.3, 0.0, java.awt.GridBagConstraints.CENTER, java.awt.GridBagConstraints.HORIZONTAL,
        new java.awt.Insets(0, 0, 0, 0), 0, 0));
        panPanel.add(button4,
        new java.awt.GridBagConstraints(1, 0, 1, 1, 0.3, 0.0, java.awt.GridBagConstraints.CENTER, java.awt.GridBagConstraints.HORIZONTAL,
        new java.awt.Insets(0, 0, 0, 0), 0, 0));
        button1.setLabel("E");
        button2.setLabel("W");
        button3.setLabel("S");
        button3.setSize(new java.awt.Dimension(50,32));
        button4.setLabel("N");
        button5.setLabel("NE");
        button6.setLabel("NW");
        button7.setLabel("SE");
        button8.setLabel("SW");
       
    }

    public void setDocument(VGLDocument document) {
        this.document = document;
        docViewPanel.setDocument(document);
        VGLBoundary boundary = document.getBoundary();
        staticViewport = new VGLViewport(boundary.xmin, boundary.ymin, boundary.xmax, boundary.ymax);
        docViewPanel.setViewport(staticViewport);
        docViewPanel.setWindow(new VGLWindow(0, 0, getWidth(), getHeight()));
    }

    public void setStatusMessage(String statusMessage) {
        this.docViewPanel.setStatusMessage(statusMessage);
    }

    private void resetViewport() {
        if (document == null) {
            return;
        }
        VGLBoundary boundary = document.getBoundary();
        staticViewport = new VGLViewport(boundary.xmin, boundary.ymin, boundary.xmax, boundary.ymax);
        docViewPanel.setViewport(staticViewport);
    }

    private void zoomOut() {
        VGLViewport viewport = docViewPanel.getViewport();
        long halfWidth = (viewport.xmax - viewport.xmin) / 4L;
        long halfHeight = (viewport.ymax - viewport.ymin) / 4L;
        staticViewport = new VGLViewport(viewport.xmin - halfWidth, viewport.ymin - halfHeight, viewport.xmax + halfWidth,
            viewport.ymax + halfWidth);
        docViewPanel.setViewport(staticViewport);
    }

    private void zoomIn() {
        VGLViewport viewport = docViewPanel.getViewport();
        long halfWidth = (viewport.xmax - viewport.xmin) / 4L;
        long halfHeight = (viewport.ymax - viewport.ymin) / 4L;
        VGLViewport v = new VGLViewport(viewport.xmin + halfWidth, viewport.ymin + halfHeight, viewport.xmax - halfWidth,
            viewport.ymax - halfWidth);
        if (v.xmin < v.xmax && v.ymin < v.ymax) {
            staticViewport = v;
            docViewPanel.setViewport(v);
        }
        else {
        }
    }

    private void sdazMode() {
        this.sdazCheckbox.setState(true);
        this.marqueeCheckbox.setState(false); // uncheck other option(s)
        this.docViewMouseListener.listenForSDAZ(); // mouse handler now handles cursor in context of SDAZ
    }

    private void marqueeMode() {
        this.marqueeCheckbox.setState(true);
        this.sdazCheckbox.setState(false); // uncheck other option(s)
        this.docViewMouseListener.listenForMarquee(); // mouse handler now handles cursor in context of zoom marquee
    }

    private void initInteraction() {
        sdazSubject = new SDAZDocViewPanelSubject(docViewPanel);
        sdazDriver = new SDAZDriver(sdazSubject);
        docViewMouseListener = new DocViewMouseHandler (sdazDriver, docViewPanel);
        docViewPanel.addMouseListener(docViewMouseListener);
        docViewPanel.addMouseMotionListener(docViewMouseListener);

            /* Attach listener to the map panel to notify the SDAZDriver
            * whenever the panel has repainted
            */

        docViewPanel.setRepaintObserver(
            new RepaintObserver() {
                public void update() {
                    sdazDriver.update();
                }
            });
    }

    /** Converts an AWT Point into an SDAZPoint */
    private SDAZPoint convertPoint(Point p) {
        return new SDAZPoint(p.x, p.y);
    }

    private Panel controlPanel = new Panel();

    /**
     * @link aggregationByValue
     * @clientRole contains
     */
    private DocViewPanel docViewPanel;
    private Button zoomOutButton = new Button();
    private VGLDocumentRenderer renderer;
    private VGLDocument document;
    private SDAZDriver sdazDriver;
    private SDAZSubject sdazSubject;
    private VGLViewport staticViewport;

    /**
     * @link aggregationByValue
     * @supplierCardinality 1
     * @clientCardinality 1 
     */
    private DocViewMouseHandler docViewMouseListener;

    /**
     * @supplierCardinality 1
     * @clientCardinality 1
     */
    private RepaintObserver lnkRepaintObserver;

    /**
     * @clientCardinality 1
     * @link aggregationByValue
     * @supplierCardinality 1
     */
    private SDAZDocViewPanelSubject sdazSubjectAdapter;

    private Panel cursorPanel = new Panel();
    private Checkbox sdazCheckbox = new Checkbox();
    private Checkbox marqueeCheckbox = new Checkbox();
    private Label label1 = new Label();
    private Label label2 = new Label();
    private Panel zoomPanel = new Panel();
    private Button zoomInButton = new Button();
    private Button homeButton = new Button();
    private Panel panPanel = new Panel();
    private Button button1 = new Button();
    private Button button2 = new Button();
    private Button button3 = new Button();
    private Button button4 = new Button();
    private Button button5 = new Button();
    private Button button6 = new Button();
    private Button button7 = new Button();
    private Button button8 = new Button();
}
