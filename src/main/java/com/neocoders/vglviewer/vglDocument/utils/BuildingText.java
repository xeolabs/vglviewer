/* Generated by Together */

package com.neocoders.vglviewer.vglDocument.utils;

import com.neocoders.vglviewer.vglDocument.VGLStyle;
import com.neocoders.vglviewer.vglDocument.VGLPoint;
import com.neocoders.vglviewer.vglDocument.VGLText;
import com.neocoders.vglviewer.vglDocument.VGLProperties;

class BuildingText extends AbstractBuilderState {
    /** Initialise new state in which we are building a text element */
    public BuildingText(BuildContext context, AbstractBuilderState parent) {
        super(context, parent);
        this.style = context.getDefaultStyle();
        this.description = "none";
        this.id = context.getID();
        this.value = null;
        this.origin = null;
    }

    /** Set value of text element */
    public void setText(String value) {
        this.value = value;
    }

    /** Set origin of text element */
    public void setOrigin(long x, long y) {
        this.origin = new VGLPoint(x, y);
    }

    /** Apply a previously defined style to this text element */
    public void applyStyle(String styleName) {
        VGLStyle temp = context.getStyle(styleName);
        if (temp == null) {
            context.getErrorHandler().handleError("no style named '" + styleName + "' defined");
        }
        this.style = temp;
    }

    /** Build text, add it to document, return parent state */
    public AbstractBuilderState close() {
        if (origin == null) {
            context.getErrorHandler().handleError("no origin specified for text - text not created");
            return parent;
        }
        if (value == null) {
            context.getErrorHandler().handleError("no text value specified for text - text not created");
            return parent;
        }
        VGLText element = new VGLText(new VGLProperties(style, description, id), origin, value);
        context.getDocument().addElement(element);
        return parent;
    }

    /** Get description of element being built */
    protected String getDescription() {
        return "an element of text";
    }

    private VGLStyle style;
    private String description;
    private String id;
    private VGLPoint origin;
    private String value;
}
